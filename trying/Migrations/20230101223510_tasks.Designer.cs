// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestEFCodeFirst;

#nullable disable

namespace TestEFCodeFirst.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230101223510_tasks")]
    partial class tasks
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("TaskToDoSequence");

            modelBuilder.Entity("TestEFCodeFirst.TaskToDo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [TaskToDoSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<DateTime>("DateToDo")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TasksToDo");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("trying.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.ToTable("People");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("TestEFCodeFirst.CyclicTask", b =>
                {
                    b.HasBaseType("TestEFCodeFirst.TaskToDo");

                    b.Property<int>("DayInWeek")
                        .HasColumnType("int");

                    b.ToTable("CyclicTasks");
                });

            modelBuilder.Entity("TestEFCodeFirst.ActivePartner", b =>
                {
                    b.HasBaseType("trying.Person");

                    b.Property<int>("Abilities")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("ActivePartner", (string)null);
                });

            modelBuilder.Entity("TestEFCodeFirst.HouseholdManager", b =>
                {
                    b.HasBaseType("trying.Person");

                    b.Property<double>("apartmentArea")
                        .HasColumnType("float");

                    b.Property<int>("numOfPeople")
                        .HasColumnType("int");

                    b.Property<int>("numOfrooms")
                        .HasColumnType("int");

                    b.ToTable("HouseholdManager", (string)null);
                });

            modelBuilder.Entity("TestEFCodeFirst.ActivePartner", b =>
                {
                    b.HasOne("trying.Person", null)
                        .WithOne()
                        .HasForeignKey("TestEFCodeFirst.ActivePartner", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestEFCodeFirst.HouseholdManager", b =>
                {
                    b.HasOne("trying.Person", null)
                        .WithOne()
                        .HasForeignKey("TestEFCodeFirst.HouseholdManager", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
